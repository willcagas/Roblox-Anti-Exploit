local noclip = {
	settings = {
		demerits = 1.5
	}
}

function noclip:onDetection(player, playersData, part, primaryPartPos)
	local physicsData = playersData.physics
	local exploitData = playersData.exploits

	exploitData.flags += 1
	exploitData.lastDetection = os.clock()
	exploitData.demerits += self.settings.demerits
	
	table.insert(exploitData.detections, string.lower(script.Name))
end

function noclip:run(player, playersData, timePassed)
	local character = player.Character
	local primaryPart = character.PrimaryPart
	
	local physicsData = playersData.physics
	
	local primaryPartPos = primaryPart.Position
	local lastPosition = physicsData.lastPosition
	
	if not primaryPartPos or not lastPosition then return end
	
	local raycastParams = RaycastParams.new()
	raycastParams.FilterDescendantsInstances = {character}
	raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
	raycastParams.IgnoreWater = true
	
	local raycastResult = workspace:Raycast(
		lastPosition, primaryPartPos - lastPosition,
		raycastParams
	)
	
	if raycastResult then
		local part = raycastResult.Instance
		
		if part.CanCollide == true then
			self:onDetection(player, playersData, part, primaryPartPos)
			
			return true
		end
	end
end

return noclip
