local speed = {
	settings = {
		leeway = 15,
		demerits = 1
	}
}

function speed:onDetection(player, playersData, playerSpeed, primaryPartPos)
	local physicsData = playersData.physics
	local exploitData = playersData.exploits

	exploitData.flags += 1
	exploitData.lastDetection = os.clock()
	exploitData.demerits += self.settings.demerits
	
	table.insert(exploitData.detections, string.lower(script.Name))
end

function speed:run(player, playersData, timePassed)
	local character = player.Character
	local primaryPart = character.PrimaryPart
	
	local physicsData = playersData.physics
	
	local primaryPartPos = primaryPart.Position
	local lastPosition = physicsData.lastPosition
	
	if not primaryPartPos or not lastPosition then return end
	
	local raycastParams = RaycastParams.new()
	raycastParams.FilterDescendantsInstances = {character}
	raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
	raycastParams.IgnoreWater = false

	local onGround = workspace:Raycast(primaryPartPos, Vector3.new(0, -physicsData.maxJump,0), raycastParams)
	
	if onGround then
		local studsPerSecond = math.floor((Vector3.new(lastPosition.X, 0, lastPosition.Z) - Vector3.new(primaryPartPos.X, 0, primaryPartPos.Z)).Magnitude / timePassed) 

		if studsPerSecond >= physicsData.maxSpeed then
			self:onDetection(player, playersData, studsPerSecond, primaryPartPos)

			return true
		end
	end
end

return speed
